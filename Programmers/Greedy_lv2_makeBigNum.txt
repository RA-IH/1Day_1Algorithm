// 1

class Solution {
    public String solution(String number, int k) {
        StringBuilder sb = new StringBuilder();
	    
	int cnt = number.length() - k;
        int left = 0;
        int right = number.length() - cnt;
        int max = -1;
        int idx = 0;
        
        while(cnt > 0) {
             max = -1;
             for(int j = left ; j <= right ; ++j){
                 int num = number.charAt(j) - '0';
                 if(num > max){
                     idx = j;
                     max = num;
                 }
             }
             sb.append(number.charAt(idx));
             left = idx + 1;
             right = number.length() - --cnt;
        }

        return sb.toString();
    }
}

// 2. stack 이용 방식

import java.util.*;

class Solution {
    
    public String solution(String number, int k) {
        int len = number.length();
        char[] result = new char[len-k];
	    Stack<Character> stack = new Stack<>();
        
        int necessaryLen = len-k;
        
        for(int i=0; i<len; i++) {
            Character c = number.charAt(i);
            while(!stack.isEmpty() && stack.peek() < c && k-- > 0)
                stack.pop();
            stack.push(c);
        }
        
        for(int i=0; i<necessaryLen; i++)
            result[i] = stack.get(i);

        
        return new String(result);
    }
}