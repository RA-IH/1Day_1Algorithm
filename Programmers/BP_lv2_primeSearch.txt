import java.util.*;

class Solution {
    
    static HashSet<Integer> set = new HashSet<>();
    static int[] v = new int[8];
    public boolean primeCheck(int num) {
        if(num < 2) return false;
        for(int i=2; i<=num/2; i++){
            if(num%i == 0) return false;
        }
        return true;
    }
    
    public void makeNum(String[] nums, int len, String numStr) {
        if(len == 0) {
            int num = Integer.parseInt(numStr);
            if(primeCheck(num)) set.add(num);
        }
        
        for(int i=0; i<nums.length; i++){
            if(v[i] == 0) {
                v[i] = 1;
                makeNum(nums, len-1, numStr+nums[i]);
                v[i] = 0;
            }
        }
    }
    
    public int solution(String numbers) {
        int answer = 0;
        String numStr = "";
        
        String[] nums = numbers.split("");
        
        for(int i=1; i<=nums.length; i++){
            makeNum(nums, i, numStr);
        }
        
        answer = set.size();
        
        return answer;
    }
}


/*


- 소요시간: 약 30분
- visited(방문확인)을 통한 완전탐색
- 시간복잡도: O(N^2) - N은 numbers의 길이?
- 다른 사람들은 순열을 사용하여 문제 풀이
- 순열: n개의 값에서 r개의 숫자를 순서대로 뽑는 경우

>>> '순열'을 구현하여 풀이해볼 것


*/