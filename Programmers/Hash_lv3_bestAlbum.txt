import java.util.*;


class Solution {
    public int[] solution(String[] genres, int[] plays) {
        
        class Music {
            String genre;
            int playCnt;
            int num;
            
            public Music() {}
            public Music(String genre, int playCnt, int num) {
                this.genre = genre;
                this.playCnt = playCnt;
                this.num = num;
            }
            
            public String getGenre() {
                return genre;
            }
            public int getPlayCnt() {
                return playCnt;
            }
            public int getNum() {
                return num;
            }
            
            //@Override
            // public int compare(Music m1, Music m2) {
            //     if(m1.getPlayCnt() > m2.getPlayCnt()) {
            //         return 1;
            //     } else {
            //         return -1;
            //     }
            // }
            
        }
        
        int[] answer = {};
        ArrayList<Integer> answerList = new ArrayList<Integer>();
        
        Map<String, ArrayList<Music>> album = new HashMap<String, ArrayList<Music>>();
        Map<String, Integer> bestGenre = new HashMap<String, Integer>();
        
        for(int i=0; i<genres.length; i++){
            bestGenre.put(genres[i], bestGenre.getOrDefault(genres[i],0)+plays[i]);
            
            if(!album.containsKey(genres[i])) {
                album.put(genres[i], new ArrayList<Music>());
                album.get(genres[i]).add(new Music(genres[i], plays[i], i));
            } else {
                album.get(genres[i]).add(new Music(genres[i], plays[i], i));
            }
        }
        
        List<String> keySetList = new ArrayList<>(bestGenre.keySet());
        // 내림차순 //
        Collections.sort(keySetList, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                return bestGenre.get(o2).compareTo(bestGenre.get(o1));
            }
        });
        
        
        for(String key : keySetList) {
            int size = album.get(key).size();
            Collections.sort(album.get(key), new Comparator<Music>() {
                    @Override
                    public int compare(Music m1, Music m2) {
                        if(m1.getPlayCnt() > m2.getPlayCnt()) {
                            return -1;
                        } else {
                            return 0;
                        }
                     }
                });
            answerList.add(album.get(key).get(0).getNum());
            if(size < 2) {
                continue;
            } else {
                answerList.add(album.get(key).get(1).getNum());
            } 
        }
        
        answer = new int[answerList.size()];
        for(int i=0; i<answerList.size(); i++){
            answer[i] = answerList.get(i);
        }
        

        return answer;
    }
}