import java.util.*;

class Solution {
    
    static boolean[] v = new boolean[10010];
    
    public void dfs(ArrayList<String> list, String s, String[][] tickets, String[] answer) {
        if (list.size() == tickets.length + 1) {
			for (int i = 0; i < list.size(); i++) {
				if (answer[i] == null) {
					answer[i] = list.get(i);
				}
				if (answer[i].equals(list.get(i))) continue;
				else {
					if (answer[i].compareTo(list.get(i)) > 0) {
						for (int j = i; j < list.size(); j++) {
							answer[j] = list.get(j);
						}
					}
					break;
				}
			}
			list.clear();
			list.add("ICN");
		}

		ArrayList<String> copy_list = new ArrayList<String>();
		
		copy_list.addAll(list);

		for (int i = 0; i < tickets.length; i++) {
			String start = tickets[i][0];
			String end = tickets[i][1];
			if (!v[i] && start.equals(s)) {
				v[i] = true;
				copy_list.add(end);
				dfs(copy_list, end, tickets, answer);
				v[i] = false;
				copy_list.remove(copy_list.size() - 1);
			}
		}
    }
    
    public String[] solution(String[][] tickets) {
        String[] answer = new String[tickets.length + 1];

		ArrayList<String> list = new ArrayList<String>();
		list.add("ICN");

		dfs(list, "ICN", tickets, answer);
        
        return answer;
    }
}


// 스택 사용한 풀이법도 존재